// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c4FCQiVEmUqfPef3MjSmg8
// Component: hSQBkSnUA7tC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import ItemDetails from "../../ItemDetails"; // plasmic-import: cOK-sZ_QtzrG/component
import Button2 from "../../Button"; // plasmic-import: WoUXpKFRVp6X/component

import { useScreenVariants as useScreenVariantsqExrow76Zrl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QExrow-76Zrl/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: c4FCQiVEmUqfPef3MjSmg8/projectcss
import sty from "./PlasmicDetails.module.css"; // plasmic-import: hSQBkSnUA7tC/css

import ChecksvgIcon from "../plasmic_tabs/icons/PlasmicIcon__Checksvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon
import ChecksvgIcon2 from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: wSb16lybm7DS/icon
import IconIcon2 from "./icons/PlasmicIcon__Icon"; // plasmic-import: m3IaC3t3OSQT/icon

createPlasmicElementProxy;

export type PlasmicDetails__VariantMembers = {};
export type PlasmicDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicDetails__VariantsArgs;
export const PlasmicDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicDetails__ArgsType = {};
type ArgPropType = keyof PlasmicDetails__ArgsType;
export const PlasmicDetails__ArgProps = new Array<ArgPropType>();

export type PlasmicDetails__OverridesType = {
  details?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  dataFetcher?: Flex__<typeof Fetcher>;
  dataFetcher2?: Flex__<typeof Fetcher>;
  footer2?: Flex__<"div">;
  logo2?: Flex__<"div">;
  social4?: Flex__<"div">;
  social5?: Flex__<"div">;
  social6?: Flex__<"div">;
};

export interface DefaultDetailsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDetails__RenderFunc(props: {
  variants: PlasmicDetails__VariantsArgs;
  args: PlasmicDetails__ArgsType;
  overrides: PlasmicDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "prodModel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "t-shirt"
      },
      {
        path: "sku",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "asc001"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqExrow76Zrl()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"details"}
          data-plasmic-override={overrides.details}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.details
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__kRbuf
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__tzKr
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dkqhs)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/cncXPscIsvg.svg",
                      fullWidth: 449.49,
                      fullHeight: 98.63,
                      aspectRatio: 4.557335
                    }}
                  />
                </PlasmicLink__>
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xbgik)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ui2Im
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Home"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__hqvtb
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__taIue
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xnhun)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__k1JgD)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__kSgv)}>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__nsTku
                )}
                component={Link}
                href={`/`}
                platform={"nextjs"}
              >
                {"Back to Collections /"}
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vXyyw
                )}
              >
                {"Apriwa Motorsport"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__vZ66I)}>
              <TabsContainer
                data-plasmic-name={"tabsContainer"}
                data-plasmic-override={overrides.tabsContainer}
                className={classNames("__wab_instance", sty.tabsContainer)}
                initialKey={"t-shirt"}
                previewKey={"t-shirt"}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9NJz6
                      )}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mdQwA
                        )}
                      >
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__gFkCj
                          )}
                          tabKey={"t-shirt"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__hamTk
                            )}
                            color={"white"}
                            shape={"sharp"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sbV53
                              )}
                            >
                              {"T-Shirt"}
                            </div>
                          </Button>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__othwh
                          )}
                          tabKey={"hoodie"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__eAwtz
                            )}
                            color={"white"}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateProdModel"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["prodModel"]
                                      },
                                      operation: 0,
                                      value: "hoodie"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateProdModel"] != null &&
                                typeof $steps["updateProdModel"] === "object" &&
                                typeof $steps["updateProdModel"].then ===
                                  "function"
                              ) {
                                $steps["updateProdModel"] = await $steps[
                                  "updateProdModel"
                                ];
                              }

                              $steps["updateProdModel2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: ["plasmic_refresh_all"]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateProdModel2"] != null &&
                                typeof $steps["updateProdModel2"] ===
                                  "object" &&
                                typeof $steps["updateProdModel2"].then ===
                                  "function"
                              ) {
                                $steps["updateProdModel2"] = await $steps[
                                  "updateProdModel2"
                                ];
                              }
                            }}
                            shape={"sharp"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bFVns
                              )}
                            >
                              {"Hoodie"}
                            </div>
                          </Button>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton___80HpP
                          )}
                          tabKey={"sweater"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__nnG0Z
                            )}
                            color={"white"}
                            shape={"sharp"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ufSnJ
                              )}
                            >
                              {"Sweater"}
                            </div>
                          </Button>
                        </TabButton>
                        <TabUnderline
                          data-plasmic-name={"tabUnderline"}
                          data-plasmic-override={overrides.tabUnderline}
                          className={classNames(
                            "__wab_instance",
                            sty.tabUnderline
                          )}
                        />
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__k4Tew
                        )}
                      >
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__fy1H
                          )}
                          tabKey={"t-shirt"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6HeIj
                            )}
                          >
                            <LoadingBoundary
                              className={classNames(
                                "__wab_instance",
                                sty.loadingBoundary__n19Jm
                              )}
                              loadingState={
                                <DataCtxReader__>
                                  {$ctx => (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gqiUx
                                      )}
                                    >
                                      {"Loading..."}
                                    </div>
                                  )}
                                </DataCtxReader__>
                              }
                            >
                              <DataCtxReader__>
                                {$ctx => (
                                  <Fetcher
                                    data-plasmic-name={"dataFetcher"}
                                    data-plasmic-override={
                                      overrides.dataFetcher
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.dataFetcher
                                    )}
                                    dataOp={{
                                      sourceId: "eA7ZA8G1r1sNAkLZ6fF4gN",
                                      opId: "36786f75-8c77-4b93-963a-4f58cea5da1b",
                                      userArgs: {
                                        filters: [
                                          $ctx.params.slug,
                                          $ctx.currentTabKey
                                        ]
                                      },
                                      cacheKey: `plasmic.$.f-iLm7NUXuit.$.36786f75-8c77-4b93-963a-4f58cea5da1b.$.`,
                                      invalidatedKeys: null,
                                      roleId: null
                                    }}
                                    queries={{}}
                                  >
                                    {($queries: any) => (
                                      <ItemDetails
                                        className={classNames(
                                          "__wab_instance",
                                          sty.itemDetails__qT66H
                                        )}
                                        prodProp={(() => {
                                          try {
                                            return $queries.data.data;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    )}
                                  </Fetcher>
                                )}
                              </DataCtxReader__>
                            </LoadingBoundary>
                          </div>
                        </TabContent>
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__qd6TH
                          )}
                          tabKey={"hoodie"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jWpeh
                            )}
                          >
                            <LoadingBoundary
                              className={classNames(
                                "__wab_instance",
                                sty.loadingBoundary__oq3Xh
                              )}
                              loadingState={
                                <DataCtxReader__>
                                  {$ctx => (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__z0ZlA
                                      )}
                                    >
                                      {"Loading..."}
                                    </div>
                                  )}
                                </DataCtxReader__>
                              }
                            >
                              <DataCtxReader__>
                                {$ctx => (
                                  <Fetcher
                                    data-plasmic-name={"dataFetcher2"}
                                    data-plasmic-override={
                                      overrides.dataFetcher2
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.dataFetcher2
                                    )}
                                    dataOp={{
                                      sourceId: "eA7ZA8G1r1sNAkLZ6fF4gN",
                                      opId: "36786f75-8c77-4b93-963a-4f58cea5da1b",
                                      userArgs: {
                                        filters: [
                                          $ctx.params.slug,
                                          $ctx.currentTabKey
                                        ]
                                      },
                                      cacheKey: `plasmic.$.pa4_mo7BrQuP.$.36786f75-8c77-4b93-963a-4f58cea5da1b.$.`,
                                      invalidatedKeys: null,
                                      roleId: null
                                    }}
                                    queries={{}}
                                  >
                                    {($queries: any) => (
                                      <ItemDetails
                                        className={classNames(
                                          "__wab_instance",
                                          sty.itemDetails__vRiv
                                        )}
                                        prodProp={(() => {
                                          try {
                                            return $queries.data.data;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    )}
                                  </Fetcher>
                                )}
                              </DataCtxReader__>
                            </LoadingBoundary>
                          </div>
                        </TabContent>
                      </div>
                    </div>
                  )}
                </DataCtxReader__>
              </TabsContainer>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            hasGap={true}
            className={classNames(projectcss.all, sty.footer2)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"logo2"}
              data-plasmic-override={overrides.logo2}
              hasGap={true}
              className={classNames(projectcss.all, sty.logo2)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___0EzO
                )}
                component={Link}
                href={`/`}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__nM4Td)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"178px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/cncXPsci1Invertedsvg.svg",
                    fullWidth: 178,
                    fullHeight: 40,
                    aspectRatio: 4.45
                  }}
                />
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p9S6W
                )}
              >
                {"Official Apparels Partner"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"social4"}
              data-plasmic-override={overrides.social4}
              hasGap={true}
              className={classNames(projectcss.all, sty.social4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__a7E1F
                )}
              >
                {"Connect with Cars and Clo"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nKEoR)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mvrG4
                  )}
                  component={Link}
                  href={"https://www.instagram.com/carsandclo/"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tWaol)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"32px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/instagramsvg.svg",
                      fullWidth: 32,
                      fullHeight: 32,
                      aspectRatio: 1
                    }}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__nOgig
                  )}
                  component={Link}
                  href={
                    "https://www.tiktok.com/@carsandclo?_t=8nQ5PnLKxmq&_r=1"
                  }
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ekAk)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"32px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/tiktoksvg.svg",
                      fullWidth: 32,
                      fullHeight: 32,
                      aspectRatio: 1
                    }}
                  />
                </PlasmicLink__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"social5"}
              data-plasmic-override={overrides.social5}
              hasGap={true}
              className={classNames(projectcss.all, sty.social5)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__g71Eq
                )}
              >
                {"Marketplace"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__teWz)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__nydD
                  )}
                  component={Link}
                  href={"https://shopee.co.id/carsandcloofficial"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__zqGOo)}
                    displayHeight={"32px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/shopeesvg.svg",
                      fullWidth: 84,
                      fullHeight: 32,
                      aspectRatio: 2.625
                    }}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__ku00E
                  )}
                  component={Link}
                  href={"https://www.tokopedia.com/carsandcloofficial"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__oNcQo)}
                    displayHeight={"32px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/tokpedsvg.svg",
                      fullWidth: 99,
                      fullHeight: 32,
                      aspectRatio: 3.09375
                    }}
                  />
                </PlasmicLink__>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__fQlhw)}
                  displayHeight={"32px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/tShopsvg.svg",
                    fullWidth: 114,
                    fullHeight: 32,
                    aspectRatio: 3.5625
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lcNy9)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__aH6Wp)}
                  displayHeight={"32px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/bigcartesvg2.svg",
                    fullWidth: 89,
                    fullHeight: 32,
                    aspectRatio: 2.78125
                  }}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"social6"}
              data-plasmic-override={overrides.social6}
              hasGap={true}
              className={classNames(projectcss.all, sty.social6)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Eb1M
                )}
              >
                {"Want to collaborate?"}
              </div>
              <Button2
                className={classNames("__wab_instance", sty.button___3Y6D)}
                link={"mailto:cloandcars@gmail.com"}
                shape={"sharp"}
                showEndIcon={true}
                target={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iJoT
                  )}
                >
                  {"Get in touch with us"}
                </div>
              </Button2>
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xZzSw
              )}
            >
              {"\u00a9 2024 Cars and Clo"}
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  details: [
    "details",
    "navigationBar",
    "tabsContainer",
    "tabUnderline",
    "dataFetcher",
    "dataFetcher2",
    "footer2",
    "logo2",
    "social4",
    "social5",
    "social6"
  ],
  navigationBar: ["navigationBar"],
  tabsContainer: [
    "tabsContainer",
    "tabUnderline",
    "dataFetcher",
    "dataFetcher2"
  ],
  tabUnderline: ["tabUnderline"],
  dataFetcher: ["dataFetcher"],
  dataFetcher2: ["dataFetcher2"],
  footer2: ["footer2", "logo2", "social4", "social5", "social6"],
  logo2: ["logo2"],
  social4: ["social4"],
  social5: ["social5"],
  social6: ["social6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  details: "div";
  navigationBar: typeof NavigationBar;
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  dataFetcher: typeof Fetcher;
  dataFetcher2: typeof Fetcher;
  footer2: "div";
  logo2: "div";
  social4: "div";
  social5: "div";
  social6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDetails__VariantsArgs;
    args?: PlasmicDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDetails__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDetails__ArgProps,
          internalVariantPropNames: PlasmicDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "details") {
    func.displayName = "PlasmicDetails";
  } else {
    func.displayName = `PlasmicDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicDetails = Object.assign(
  // Top-level PlasmicDetails renders the root element
  makeNodeComponent("details"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    dataFetcher2: makeNodeComponent("dataFetcher2"),
    footer2: makeNodeComponent("footer2"),
    logo2: makeNodeComponent("logo2"),
    social4: makeNodeComponent("social4"),
    social5: makeNodeComponent("social5"),
    social6: makeNodeComponent("social6"),

    // Metadata about props expected for PlasmicDetails
    internalVariantProps: PlasmicDetails__VariantProps,
    internalArgProps: PlasmicDetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDetails;
/* prettier-ignore-end */
