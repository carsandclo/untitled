// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c4FCQiVEmUqfPef3MjSmg8
// Component: hSQBkSnUA7tC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Button from "../../Button"; // plasmic-import: WoUXpKFRVp6X/component

import { useScreenVariants as useScreenVariantsqExrow76Zrl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QExrow-76Zrl/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: c4FCQiVEmUqfPef3MjSmg8/projectcss
import sty from "./PlasmicDetails.module.css"; // plasmic-import: hSQBkSnUA7tC/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: wSb16lybm7DS/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: m3IaC3t3OSQT/icon
import Shopeesvg2Icon from "./icons/PlasmicIcon__Shopeesvg2"; // plasmic-import: jkqfVWSlYrIo/icon
import WorldsvgIcon from "./icons/PlasmicIcon__Worldsvg"; // plasmic-import: VOYVMBHHCe1x/icon

createPlasmicElementProxy;

export type PlasmicDetails__VariantMembers = {};
export type PlasmicDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicDetails__VariantsArgs;
export const PlasmicDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicDetails__ArgsType = {};
type ArgPropType = keyof PlasmicDetails__ArgsType;
export const PlasmicDetails__ArgProps = new Array<ArgPropType>();

export type PlasmicDetails__OverridesType = {
  details?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  img1?: Flex__<"div">;
  img2?: Flex__<"div">;
  img3?: Flex__<"div">;
  img4?: Flex__<"div">;
  footer2?: Flex__<"div">;
  logo2?: Flex__<"div">;
  social4?: Flex__<"div">;
  social5?: Flex__<"div">;
  social6?: Flex__<"div">;
};

export interface DefaultDetailsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDetails__RenderFunc(props: {
  variants: PlasmicDetails__VariantsArgs;
  args: PlasmicDetails__ArgsType;
  overrides: PlasmicDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqExrow76Zrl()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"details"}
          data-plasmic-override={overrides.details}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.details
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__kRbuf
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__tzKr
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dkqhs)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/cncXPscIsvg.svg",
                      fullWidth: 449.49,
                      fullHeight: 98.63,
                      aspectRatio: 4.557335
                    }}
                  />
                </PlasmicLink__>
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xbgik)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ui2Im
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Home"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__hqvtb
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__taIue
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xnhun)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__k1JgD)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__kSgv)}>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__nsTku
                )}
                component={Link}
                href={`/`}
                platform={"nextjs"}
              >
                {"Back to Collections /"}
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vXyyw
                )}
              >
                {"Apriwa Motorsport"}
              </div>
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ulege)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? "800px"
                  : "auto"
              }
              id={"main_image"}
              loading={"lazy"}
              src={{
                src: "/plasmic/blank_website_mobile_first/images/frontViewpng.png",
                fullWidth: 1000,
                fullHeight: 1000,
                aspectRatio: undefined
              }}
            />

            {(() => {
              const child$Props = {
                beforeChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ),
                className: classNames("__wab_instance", sty.sliderCarousel),
                initialSlide: generateStateValueProp($state, [
                  "sliderCarousel",
                  "currentSlide"
                ]),
                ref: ref => {
                  $refs["sliderCarousel"] = ref;
                },
                rows: 1,
                sliderScopeClassName: sty["sliderCarousel__slider"],
                slidesPerRow: 4
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "currentSlide",
                    plasmicStateName: "sliderCarousel.currentSlide"
                  }
                ],
                [],
                SliderWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <SliderWrapper
                  data-plasmic-name={"sliderCarousel"}
                  data-plasmic-override={overrides.sliderCarousel}
                  {...child$Props}
                >
                  <div
                    data-plasmic-name={"img1"}
                    data-plasmic-override={overrides.img1}
                    className={classNames(projectcss.all, sty.img1)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__hGls4
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return ($state.main_image = "image1");
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__kjaX)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        id={"image1"}
                        src={{
                          src: "/plasmic/blank_website_mobile_first/images/fontAPriwapng.png",
                          fullWidth: 1000,
                          fullHeight: 1000,
                          aspectRatio: undefined
                        }}
                      />
                    </PlasmicLink__>
                  </div>
                  <div
                    data-plasmic-name={"img2"}
                    data-plasmic-override={overrides.img2}
                    className={classNames(projectcss.all, sty.img2)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__ghUvF
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return ($state.main_image = "image1");
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___0Rlcm)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        id={"image1"}
                        src={{
                          src: "/plasmic/blank_website_mobile_first/images/fontAPriwapng.png",
                          fullWidth: 1000,
                          fullHeight: 1000,
                          aspectRatio: undefined
                        }}
                      />
                    </PlasmicLink__>
                  </div>
                  <div
                    data-plasmic-name={"img3"}
                    data-plasmic-override={overrides.img3}
                    className={classNames(projectcss.all, sty.img3)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__gcDpm
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return ($state.main_image = "image1");
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__loIv)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        id={"image1"}
                        src={{
                          src: "/plasmic/blank_website_mobile_first/images/fontAPriwapng.png",
                          fullWidth: 1000,
                          fullHeight: 1000,
                          aspectRatio: undefined
                        }}
                      />
                    </PlasmicLink__>
                  </div>
                  <div
                    data-plasmic-name={"img4"}
                    data-plasmic-override={overrides.img4}
                    className={classNames(projectcss.all, sty.img4)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__cSVa
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return ($state.main_image = "image1");
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__oiz12)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        id={"image1"}
                        src={{
                          src: "/plasmic/blank_website_mobile_first/images/fontAPriwapng.png",
                          fullWidth: 1000,
                          fullHeight: 1000,
                          aspectRatio: undefined
                        }}
                      />
                    </PlasmicLink__>
                  </div>
                </SliderWrapper>
              );
            })()}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cCKp8)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dBbPt
                )}
              >
                {"911 GT3 Cup - Front View"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dElHt
                )}
              >
                {
                  "A special highlight for Porsche fans are our limited Porsche T-shirts with collector's themes. The tasteful and sometimes colorful prints on these T-shirts show different Porsche themes such as cars, model logos or historical themes."
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__aZckR)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sNlVw
                )}
              >
                {"Size"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8YaiT
                )}
              >
                {"S, M, L, XL, XXL"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__t6Xh3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ywIkW
                )}
              >
                {"Available on"}
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__t212C)}
                color={"white"}
                shape={"sharp"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vRqBm
                  )}
                >
                  {"Tokopedia"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__r5Ani)}
                color={"white"}
                shape={"sharp"}
                startIcon={
                  <Shopeesvg2Icon
                    className={classNames(projectcss.all, sty.svg__mzHw3)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nCel8
                  )}
                >
                  {"Shopee"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button___70Xg)}
                color={"white"}
                shape={"sharp"}
                startIcon={
                  <WorldsvgIcon
                    className={classNames(projectcss.all, sty.svg__c3Tg7)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h3Wcp
                  )}
                >
                  {"International Order"}
                </div>
              </Button>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            hasGap={true}
            className={classNames(projectcss.all, sty.footer2)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"logo2"}
              data-plasmic-override={overrides.logo2}
              hasGap={true}
              className={classNames(projectcss.all, sty.logo2)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___0EzO
                )}
                component={Link}
                href={`/`}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__nM4Td)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"178px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/cncXPsci1Invertedsvg.svg",
                    fullWidth: 178,
                    fullHeight: 40,
                    aspectRatio: 4.45
                  }}
                />
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p9S6W
                )}
              >
                {"Official Apparels Partner"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"social4"}
              data-plasmic-override={overrides.social4}
              hasGap={true}
              className={classNames(projectcss.all, sty.social4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__a7E1F
                )}
              >
                {"Connect with Cars and Clo"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nKEoR)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mvrG4
                  )}
                  component={Link}
                  href={"https://www.instagram.com/carsandclo/"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tWaol)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"32px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/instagramsvg.svg",
                      fullWidth: 32,
                      fullHeight: 32,
                      aspectRatio: 1
                    }}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__nOgig
                  )}
                  component={Link}
                  href={
                    "https://www.tiktok.com/@carsandclo?_t=8nQ5PnLKxmq&_r=1"
                  }
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ekAk)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"32px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/tiktoksvg.svg",
                      fullWidth: 32,
                      fullHeight: 32,
                      aspectRatio: 1
                    }}
                  />
                </PlasmicLink__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"social5"}
              data-plasmic-override={overrides.social5}
              hasGap={true}
              className={classNames(projectcss.all, sty.social5)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__g71Eq
                )}
              >
                {"Marketplace"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__teWz)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__nydD
                  )}
                  component={Link}
                  href={"https://shopee.co.id/carsandcloofficial"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__zqGOo)}
                    displayHeight={"32px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/shopeesvg.svg",
                      fullWidth: 84,
                      fullHeight: 32,
                      aspectRatio: 2.625
                    }}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__ku00E
                  )}
                  component={Link}
                  href={"https://www.tokopedia.com/carsandcloofficial"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__oNcQo)}
                    displayHeight={"32px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blank_website_mobile_first/images/tokpedsvg.svg",
                      fullWidth: 99,
                      fullHeight: 32,
                      aspectRatio: 3.09375
                    }}
                  />
                </PlasmicLink__>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__fQlhw)}
                  displayHeight={"32px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/tShopsvg.svg",
                    fullWidth: 114,
                    fullHeight: 32,
                    aspectRatio: 3.5625
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lcNy9)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__aH6Wp)}
                  displayHeight={"32px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/bigcartesvg2.svg",
                    fullWidth: 89,
                    fullHeight: 32,
                    aspectRatio: 2.78125
                  }}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"social6"}
              data-plasmic-override={overrides.social6}
              hasGap={true}
              className={classNames(projectcss.all, sty.social6)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Eb1M
                )}
              >
                {"Want to collaborate?"}
              </div>
              <Button
                className={classNames("__wab_instance", sty.button___3Y6D)}
                link={"mailto:cloandcars@gmail.com"}
                shape={"sharp"}
                showEndIcon={true}
                target={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iJoT
                  )}
                >
                  {"Get in touch with us"}
                </div>
              </Button>
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xZzSw
              )}
            >
              {"\u00a9 2024 Cars and Clo"}
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  details: [
    "details",
    "navigationBar",
    "sliderCarousel",
    "img1",
    "img2",
    "img3",
    "img4",
    "footer2",
    "logo2",
    "social4",
    "social5",
    "social6"
  ],
  navigationBar: ["navigationBar"],
  sliderCarousel: ["sliderCarousel", "img1", "img2", "img3", "img4"],
  img1: ["img1"],
  img2: ["img2"],
  img3: ["img3"],
  img4: ["img4"],
  footer2: ["footer2", "logo2", "social4", "social5", "social6"],
  logo2: ["logo2"],
  social4: ["social4"],
  social5: ["social5"],
  social6: ["social6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  details: "div";
  navigationBar: typeof NavigationBar;
  sliderCarousel: typeof SliderWrapper;
  img1: "div";
  img2: "div";
  img3: "div";
  img4: "div";
  footer2: "div";
  logo2: "div";
  social4: "div";
  social5: "div";
  social6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDetails__VariantsArgs;
    args?: PlasmicDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDetails__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDetails__ArgProps,
          internalVariantPropNames: PlasmicDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "details") {
    func.displayName = "PlasmicDetails";
  } else {
    func.displayName = `PlasmicDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicDetails = Object.assign(
  // Top-level PlasmicDetails renders the root element
  makeNodeComponent("details"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    img1: makeNodeComponent("img1"),
    img2: makeNodeComponent("img2"),
    img3: makeNodeComponent("img3"),
    img4: makeNodeComponent("img4"),
    footer2: makeNodeComponent("footer2"),
    logo2: makeNodeComponent("logo2"),
    social4: makeNodeComponent("social4"),
    social5: makeNodeComponent("social5"),
    social6: makeNodeComponent("social6"),

    // Metadata about props expected for PlasmicDetails
    internalVariantProps: PlasmicDetails__VariantProps,
    internalArgProps: PlasmicDetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDetails;
/* prettier-ignore-end */
